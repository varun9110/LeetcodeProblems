/**
 * 389. Find the Difference
 * Difficulty: Easy
 * You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.

Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:
Input: s = "", t = "y"
Output: "y"
Constraints:
0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.
*/

/**
 * Approach:
 * Create 2 mapper objects.
 * Iterate through the string of first sentence and keep storing the count of each characters in that object.
 * Next iterate through the 2nd string and check if character exists in the first mapper, if not then thats your answer.
 * if yes then count of the character should be less or equal in 2nd mapper than the 1st mapper. if exceeds then that is your answer.
 */

 var findTheDifference = function(s, t) {
    let obj = {};
    let obj2 = {};
    for(let i =0; i<s.length; i++){
        (obj[s[i]]) ? obj[s[i]]++ : obj[s[i]] = 1;
    }
    for(let i =0; i<t.length; i++){
        if(obj[t[i]]){
            if(!obj2[t[i]]){
                obj2[t[i]] = 1;
            } else if (obj2[t[i]] === obj[[t[i]]]){
                return t[i]; 
            } else {
                obj2[t[i]]++;
            }
        } else {
            return t[i];
        }
    }
};

/**
 * Refined approach:
 * convert both the strings to CharCode. then find the difference and convert the difference back to string.
 */

 var findTheDifference = function(s, t) {
    const sum1 = s.split('').reduce((acc, cur) => acc + cur.charCodeAt(0), 0);
    console.log(sum1);
    const sum2 = t.split('').reduce((acc, cur) => acc + cur.charCodeAt(0), 0);
    console.log(sum2);
    return String.fromCharCode(sum2 - sum1);
};